import Image from 'next/image';
import { getPets, WPPet } from '../lib/api';
import styles from '../components/Main/Main.module.scss';
import Link from 'next/link';
import Breadcrumbs from '@/components/Breadcrumbs/Breadcrumbs';
import Pagination from '@/components/Pagination/Pagination';
import { useState } from 'react';

interface PetsPageProps {
  pets: WPPet[];
  error?: string;
}

const customBreadcrumbs = [
  { label: '–ì–ª–∞–≤–Ω–∞—è', path: '/' },
  { label: '–ù–∞—à–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ', path: '/pets' },
];

export default function Cats({ pets, error }: PetsPageProps) {
  const [currentPage, setCurrentPage] = useState(1);
  const petsPerPage = 16;

  const indexOfLastPet = currentPage * petsPerPage;
  const indexOfFirstPet = indexOfLastPet - petsPerPage;
  const currentPets = pets.slice(indexOfFirstPet, indexOfLastPet);
  const totalPages = Math.ceil(pets.length / petsPerPage);

  if (error) {
    return (
      <div className="container">
        <Breadcrumbs customBreadcrumbs={customBreadcrumbs} />
        <div className="text-red-500 text-center py-8">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ç–∏–∫–æ–≤: {error}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
        </div>
      </div>
    );
  }

  if (!pets || pets.length === 0) {
    return (
      <div className="container">
        <Breadcrumbs customBreadcrumbs={customBreadcrumbs} />
        <div className="text-center py-8">
          <h2 className="text-2xl font-bold mb-4">–ù–∞—à–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</h2>
          <p className="text-gray-600">
            –ö–æ—Ç–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üò¢. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
          </p>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="container">
        <Breadcrumbs customBreadcrumbs={customBreadcrumbs} />
        <section className={styles.cats__page}>
          <h2 className="page__title">–ù–∞—à–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</h2>
          <p className={styles.cats__description}>
            –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –∫–æ—Ç–∏–∫–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ–≥–æ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–º—è. <br />
            –£ –∫–æ—Ç–∏–∫–æ–≤, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –ø–æ–º–µ—Ç–∫—É &quot;–∑–∞–º–µ—Ç—å –º–µ–Ω—è&quot;, - 
            –µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è (–¥–∏–∞–≥–Ω–æ–∑—ã –í–ò–ö –∏–ª–∏ –í–õ–ö, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏ –≤ —Å—Ç–∞–¥–∏–∏ —Ä–µ–º–∏—Å—Å–∏–∏). <br />
            –û–Ω–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –∂–∏–∑–Ω—å –∫–æ—Ç–∏–∫–æ–≤ –≤ —Å–µ–º—å–µ, –∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, 
            –Ω–æ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–¥—Ö–æ–¥–∞. <br /> –•–æ–∑—è–±–∞–º –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –∫–æ—Ç–∏–∫–æ–≤ 
            –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∏ 
            –ª–µ—á–µ–Ω–∏—é –∫–æ—Ç–∏–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º. <br /> –•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫–æ—Ç–∏–∫–∞?<br /> –ó–≤–æ–Ω–∏—Ç–µ  +79935662070 –°–µ—Ä–≥–µ–π, +79303025121 –û–ª—å–≥–∞
          </p>

          <div className={styles.cats__container}>
            {currentPets.map((pet) => (
              <div key={pet.id} className={styles.cats__block}>
                <div className="relative">
                  <Image
                    src={pet.pet_info?.photo || '/nophoto.png'}
                    alt={pet.title.rendered}
                    width={260}
                    height={260}
                    className="w-full h-48 object-cover mb-2 rounded"
                    onError={(e) => {
                      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                      const target = e.target as HTMLImageElement;
                      target.src = '/nophoto.png';
                    }}
                  />
                </div>
                
                <div className={styles.cats__block_info}>
                  <h3 className={styles.cats__block_title}>
                    <Link href={`/pets/${pet.slug}`}>{pet.title.rendered}</Link>
                  </h3>
                  <Link className={styles.cats__block_link} href={`/pets/${pet.slug}`}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</Link>
                </div>
              </div>
            ))}
          </div>

          {totalPages > 1 && (
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={(page) => setCurrentPage(page)}
            />
          )}
        </section>
      </div>
    </>
  );
}

export const getStaticProps = async () => {
  try {
    const pets = await getPets();
    return { props: { pets }, revalidate: 60 };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ç–∏–∫–æ–≤:', error);
    return { props: { pets: [], error: error.message }, revalidate: 60 };
  }
};