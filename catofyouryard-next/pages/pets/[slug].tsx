// pages/pets/[slug].tsx
import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { getPetBySlug, getPets, WPPet } from '@/lib/api';
import Breadcrumbs from '@/components/Breadcrumbs/Breadcrumbs';
import styles from '@/components/Main/Main.module.scss';

interface PetPageProps {
  pet: WPPet | null;
  error?: string;
  slug?: string;
}

export default function PetPage({ pet, error, slug }: PetPageProps) {
  if (error) {
    return <div className="text-red-500 text-center">–û—à–∏–±–∫–∞: {error}</div>;
  }

  if (!pet) {
    return <div className="text-center">–ö–æ—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢</div>;
  }

  const customBreadcrumbs = [
    { label: '–ì–ª–∞–≤–Ω–∞—è', path: '/' },
    { label: '–ù–∞—à–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ', path: '/pets' },
    { label: pet.title.rendered, path: `/pets/${slug}` },
  ];

  return (
    <>
      <Head>
        <title>{pet.title.rendered}</title>
        <meta name="description" content={pet.pet_info?.story || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–∏–∫–µ'} />
      </Head>
      <div className="container mx-auto p-4">
        <Breadcrumbs customBreadcrumbs={customBreadcrumbs} />
        
        <h2 className={styles.pet__title}>{pet.title.rendered}</h2> {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: styles –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ï—Å–ª–∏ —Å—Ç–∏–ª–∏ –Ω—É–∂–Ω—ã, –≤–µ—Ä–Ω–∏ –∏–º–ø–æ—Ä—Ç. –ï—Å–ª–∏ –Ω–µ—Ç - —É–¥–∞–ª–∏ className={styles.pet__title} */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <Image
              src={pet.pet_info?.photo || '/default-cat.jpg'}
              alt={pet.title.rendered}
              width={500}
              height={400}
              className="w-full h-auto object-cover rounded-lg"
              loading="lazy"
            />
          </div>
          <div>
            <div
              className="prose mt-4"
              dangerouslySetInnerHTML={{ __html: pet.content?.rendered || '' }}
            />
          </div>
        </div>
      </div>
    </>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  try {
    const pets = await getPets();
    const paths = pets.map((pet) => ({ params: { slug: pet.slug } }));
    return { paths, fallback: false }; // <-- –ò–ó–ú–ï–ù–ï–ù–û –° 'blocking' –ù–ê false
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ slug'–æ–≤ –∫–æ—Ç–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err);
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è slug'–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π
    return {
      paths: [],
      fallback: false, // <-- –í–ê–ñ–ù–û: false –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å output: 'export'
    };
  }
};

export const getStaticProps: GetStaticProps<PetPageProps> = async ({ params }) => { // –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π —Ç–∏–ø
  try {
    const slug = params?.slug as string;
    if (!slug) {
       return { notFound: true };
    }
    const pet = await getPetBySlug(slug);
    if (!pet) {
      return { notFound: true };
    }
    return { props: { pet, slug } };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏–∫–∞:", error);
    // –í —Ä–µ–∂–∏–º–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª—É—á—à–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å notFound –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return { notFound: true };
    // –ò–ª–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
    // return {
    //   props: {
    //     pet: null,
    //     error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–∏–∫–µ',
    //     slug: params?.slug as string,
    //   },
    // };
  }
};