// pages/[slug].tsx
import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import { getPageBySlug, getAllPageSlugs, WPPage } from '@/lib/api';
import Breadcrumbs from '@/components/Breadcrumbs/Breadcrumbs';
import sanitizeHtml from 'sanitize-html';

interface PageProps {
  page: WPPage | null;
  error?: string;
}

export default function Page({ page, error }: PageProps) {
  if (error) {
    return <div className="text-red-500 text-center">–û—à–∏–±–∫–∞: {error}</div>;
  }

  if (!page) {
    // –ü—Ä–∏ fallback: false —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –ª—É—á—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    return <div className="text-center">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üò¢</div>;
  }

  return (
    <>
      <Head>
        <title>{sanitizeHtml(page.title.rendered, { allowedTags: [] })}</title>
        <meta name="description" content="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã" />
      </Head>
      <div className="container mx-auto p-4">
        <Breadcrumbs currentPageTitle={sanitizeHtml(page.title.rendered, { allowedTags: [] })} />
        <h1 className="text-3xl mb-6">{sanitizeHtml(page.title.rendered, { allowedTags: [] })}</h1>
        <div
          className="prose"
          dangerouslySetInnerHTML={{
            __html: sanitizeHtml(page.content.rendered, {
              allowedTags: ['p', 'strong', 'em', 'a', 'img', 'h1', 'h2', 'h3', 'ul', 'ol', 'li'],
              allowedAttributes: { a: ['href', 'target', 'rel'], img: ['src', 'alt'] },
            }),
          }}
        />
      </div>
    </>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï slug'–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ —Å–±–æ—Ä–∫–µ
    const slugs = await getAllPageSlugs();
    const reservedSlugs = ['about', 'posts', 'pets', 'contacts'];
    const paths = slugs
      .filter((slug) => !reservedSlugs.includes(slug))
      .map((slug) => ({ params: { slug } }));

    return {
      paths,
      // fallback: 'blocking', // <-- –°–¢–ê–†–û–ï –ó–ù–ê–ß–ï–ù–ò–ï (—É–¥–∞–ª–µ–Ω–æ)
      fallback: false, // <-- –ù–û–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å output: 'export')
    };
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ slug'–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err);
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è slug'–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π
    return {
      paths: [],
      fallback: false,
    };
  }
};

export const getStaticProps: GetStaticProps<PageProps> = async ({ params }) => { // –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  try {
    const slug = params?.slug as string;
    if (!slug) {
      return { notFound: true };
    }
    const page = await getPageBySlug(slug);
    if (!page) {
      return { notFound: true };
    }
    return { props: { page } };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error);
    // –í —Ä–µ–∂–∏–º–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª—É—á—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞–ø—Ä—è–º—É—é,
    // –∏–ª–∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã.
    // return { props: { page: null, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' } };
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å 404 –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return { notFound: true };
    // –ò–ª–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
    // return { props: { page: null, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É' } };
  }
};